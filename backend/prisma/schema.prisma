generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Model
// User Model (Updated)
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String
  role          String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  otp           String?
  otpExpires    DateTime?
  isVerified    Boolean        @default(false)
  refreshToken  String?
  membershipId  String?        @db.ObjectId // Current active membership
  fitnessProfile FitnessProfile?
  workoutPlanId String?        @db.ObjectId
  progress      Progress[]
  weeklySummary WeeklySummary[]
  profilePic    String?
  memberships   Membership[]   @relation 
  Bookings      Booking[]      @relation 
  payments      Payment[]      @relation
}

type FitnessProfile {
  goals       String[]
  weight      Float?
  height      Float?
  level       String?
  calorieGoal Float?
  updatedAt   DateTime?
}

type Progress {
  workoutDate         DateTime
  planId              String    @db.ObjectId
  exercisesCompleted  ExerciseCompleted[]
  totalDuration       Float?
  totalCaloriesBurned Float?
  dailyDifficulty     String?
}

type ExerciseCompleted {
  exerciseId     String  @db.ObjectId
  name           String
  sets           Int?
  reps           Int?
  weight         Float?
  duration       Float?
  difficulty     String?
  caloriesBurned Float?
}

type WeeklySummary {
  weekStart          DateTime
  weekEnd            DateTime
  totalCaloriesBurned Float?
  weeklyDifficulty    String?
}

// Trainer Model (Updated)
model Trainer {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String          @unique
  password       String
  role           String
  profilePic     String?
  isVerified     Boolean         @default(false)
  otp            String?
  otpExpires     DateTime?
  refreshToken   String?
  personalDetails Json?
  certifications  Certification[]
  bio            String?
  specialties    String[]
  experienceLevel String?
  clients        Client[]
  paymentDetails PaymentDetails?
  availability   Availability[]
  gyms           String[]        @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookings       Booking[]       @relation
  payments       Payment[]       @relation
}

type Certification {
  name          String
  issuer        String
  dateEarned    DateTime
  certificateId String
}

type Client {
  userId       String  @db.ObjectId
  membershipId String? @db.ObjectId
  startDate    DateTime
  active       Boolean
}

type PaymentDetails {
  method        String?
  rate          Float?
  currency      String?
  paymentHistory PaymentHistory[]
}

type PaymentHistory {
  paymentId    String  @db.ObjectId
  amount       Float
  date         DateTime
  periodStart  DateTime?
  periodEnd    DateTime?
  clientCount  Int?
  hoursWorked  Float?
}

type Availability {
  day       String
  startTime String
  endTime   String
}

// WorkoutPlan Model
model WorkoutPlan {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  createdBy           String?        @db.ObjectId
  assignedTo          String         @db.ObjectId
  goal                String
  level               String
  duration            Int
  startDate           DateTime
  endDate             DateTime
  dailyWorkouts       DailyWorkout[]
  status              String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

type DailyWorkout {
  day                  Int
  exercises            Exercise[]
  totalDuration        Float?
  totalEstimatedCalories Float?
}

type Exercise {
  id                  String  @db.ObjectId
  name                String
  sets                Int?
  reps                Int?
  weight              Float?
  duration            Float?
  estimatedCalories   Float?
}

// Gym Model
model Gym {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  type                 String
  description          String?
  address              GymAddress?
  contact              Contact?
  equipment            Equipment[]
  timeSlots            TimeSlot[]
  trainers             GymTrainer[]
  suggestedPlan        String?         @db.ObjectId
  facilities           Facilities?
  capacity             Capacity?
  membershipCompatibility String[]
  images               GymImage[]
  ratings              Ratings?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  bookings             Booking[]       @relation

}

type GymAddress {
  street      String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  lat Float?
  lng Float?
}

type Contact {
  phone   String?
  email   String?
  website String?
}

type Equipment {
  type      String
  category  String
  quantity  Int
  condition String
}

type TimeSlot {
  day      String
  open     String
  close    String
  isClosed Boolean
}

type GymTrainer {
  trainerId String  @db.ObjectId
  startDate DateTime
  active    Boolean
}

type Facilities {
  hasPool       Boolean
  hasSauna      Boolean
  hasParking    Boolean
  hasLockerRooms Boolean
}

type Capacity {
  max     Int
  current Int
}

type GymImage {
  url         String
  description String?
  uploadedAt  DateTime
}

type Ratings {
  average  Float?
  count    Int?
  reviews  Review[]
}

type Review {
  userId  String  @db.ObjectId
  rating  Int
  comment String?
  date    DateTime
}

// Membership Model (Updated)
model Membership {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  plan         String
  status       String
  startDate    DateTime
  endDate      DateTime
  features     String[]
  price        Float?
  currency     String?
  paymentStatus String?
  paymentDate  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User?     @relation(fields: [userId], references: [id])
  payments     Payment[] @relation
}




//----Booking

model Booking {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId // Reference to User
  gymId      String    @db.ObjectId // Reference to Gym
  trainerId  String?   @db.ObjectId // Optional: Reference to Trainer (Diamond plans)
  slot       Slot      // Embedded: Specific time slot
  status     String    // "pending", "confirmed", "cancelled", "completed"
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  user       User?     @relation(fields: [userId], references: [id])
  gym        Gym?      @relation(fields: [gymId], references: [id])
  trainer    Trainer?  @relation(fields: [trainerId], references: [id])
  payment    Payment?  @relation(name: "BookingPayment")
}

// Embedded type for slot
type Slot {
  date      DateTime // e.g., "2025-04-01"
  startTime String   // e.g., "10:00" (24-hr format)
  endTime   String   // e.g., "11:00"
  duration  Int      // Minutes, e.g., 60
}

model Payment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  type           String
  userId         String?   @db.ObjectId
  trainerId      String?   @db.ObjectId
  membershipId   String?   @db.ObjectId
  bookingId      String?   @db.ObjectId @unique
  amount         Float
  currency       String
  paymentGateway String?
  paymentId      String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user          User?      @relation(fields: [userId], references: [id])
  trainer       Trainer?   @relation(fields: [trainerId], references: [id])
  membership    Membership? @relation(fields: [membershipId], references: [id])
  booking       Booking?   @relation(name: "BookingPayment", fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Explicit name
}